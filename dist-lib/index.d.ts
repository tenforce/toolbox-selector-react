// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react

declare module '@tenforce/toolbox-selector-react' {
    import { Block, BlockPart, Item, ItemBlock, ItemBlockPart, Part, Selector } from "@tenforce/toolbox-selector-react/Selector";
    import Checkbox from "@tenforce/toolbox-selector-react/Checkbox";
    export { Selector, Item, Block, Part, ItemBlock, BlockPart, ItemBlockPart, Checkbox, };
}

declare module '@tenforce/toolbox-selector-react/Selector' {
    import Selector from "@tenforce/toolbox-selector-react/Selector/Selector";
    import Item from "@tenforce/toolbox-selector-react/Selector/Item";
    import Block from "@tenforce/toolbox-selector-react/Selector/Block";
    import Part from "@tenforce/toolbox-selector-react/Selector/Part";
    import ItemBlock from "@tenforce/toolbox-selector-react/Selector/ItemBlock";
    import ItemBlockPart from "@tenforce/toolbox-selector-react/Selector/ItemBlockPart";
    import BlockPart from "@tenforce/toolbox-selector-react/Selector/BlockPart";
    export { Selector, Item, Block, Part, ItemBlock, ItemBlockPart, BlockPart };
}

declare module '@tenforce/toolbox-selector-react/Checkbox' {
    import * as React from "react";
    import { Props as SelectorProps } from "@tenforce/toolbox-selector-react/Selector/Selector";
    export interface Props extends SelectorProps {
        isChecked?: boolean;
        isUnchecked?: boolean;
        onChecked?: (event?: React.MouseEvent<HTMLDivElement>) => void;
        onRemoveChecked?: (event?: React.MouseEvent<HTMLDivElement>) => void;
        onUnchecked?: (event?: React.MouseEvent<HTMLDivElement>) => void;
        onRemoveUnchecked?: (event?: React.MouseEvent<HTMLDivElement>) => void;
        checkColor?: string;
        uncheckColor?: string;
        checkLabel?: JSX.Element | string;
        uncheckLabel?: JSX.Element | string;
    }
    const Checkbox: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>;
    export default Checkbox;
}

declare module '@tenforce/toolbox-selector-react/Selector/Selector' {
    import * as React from "react";
    export const className = "toolbox-selector";
    export interface Props extends React.HTMLAttributes<HTMLDivElement> {
        extraClasses?: string;
        isDeactivated?: boolean;
        isDisabled?: boolean;
        isExpanded?: boolean;
        isLoading?: boolean;
        isReadOnly?: boolean;
        isRequired?: boolean;
        isSingleSelect?: boolean;
        isWrapped?: boolean;
    }
    const Selector: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>;
    export default Selector;
}

declare module '@tenforce/toolbox-selector-react/Selector/Item' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.HTMLAttributes<HTMLDivElement> {
        checkboxName?: string;
        tabIndex?: number;
        isDeactivated?: boolean;
        isDisabled?: boolean;
        isLocked?: boolean;
        isPlaceholder?: boolean;
        isReadOnly?: boolean;
        isSelected?: boolean;
        onSelected?: (event: React.MouseEvent<HTMLDivElement>) => void;
        onUnselected?: (event: React.MouseEvent<HTMLDivElement>) => void;
        onClick?: (event: React.MouseEvent<HTMLInputElement>) => void;
        onFocus?: () => void;
        onBlur?: () => void;
        extraClasses?: string;
    }
    export default function Item({ checkboxName, tabIndex, onClick, onFocus, onBlur, onSelected, onUnselected, isDeactivated, isDisabled, isLocked, isPlaceholder, isReadOnly, isSelected, extraClasses, children, ...attrs }: Props): JSX.Element;
}

declare module '@tenforce/toolbox-selector-react/Selector/Block' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.HTMLAttributes<HTMLSpanElement> {
        extraClasses?: string;
        isPlaceholder?: boolean;
    }
    export default function Block({ children, isPlaceholder, extraClasses, ...attrs }: Props): JSX.Element;
}

declare module '@tenforce/toolbox-selector-react/Selector/Part' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.HTMLAttributes<HTMLSpanElement> {
        color?: string;
        isLabel?: boolean;
        isPlaceholder?: boolean;
        extraClasses?: string;
    }
    export default function Part({ children, color, isLabel, isPlaceholder, extraClasses, ...attrs }: Props): JSX.Element;
}

declare module '@tenforce/toolbox-selector-react/Selector/ItemBlock' {
    import { Props as ItemProps } from "@tenforce/toolbox-selector-react/Selector/Item";
    import { Props as BlockProps } from "@tenforce/toolbox-selector-react/Selector/Block";
    export interface Props extends ItemProps {
        blockProps?: BlockProps;
    }
    export default function ItemBlock({ children, blockProps, ...attrs }: Props): JSX.Element;
}

declare module '@tenforce/toolbox-selector-react/Selector/ItemBlockPart' {
    import { Props as ItemBlockProps } from "@tenforce/toolbox-selector-react/Selector/ItemBlock";
    import { Props as PartProps } from "@tenforce/toolbox-selector-react/Selector/Part";
    export interface Props extends ItemBlockProps {
        partProps?: PartProps;
    }
    export default function ItemBlockPart({ children, partProps, ...attrs }: Props): JSX.Element;
}

declare module '@tenforce/toolbox-selector-react/Selector/BlockPart' {
    import { Props as BlockProps } from "@tenforce/toolbox-selector-react/Selector/Block";
    import { Props as PartProps } from "@tenforce/toolbox-selector-react/Selector/Part";
    export interface Props extends BlockProps {
        partProps?: PartProps;
    }
    export default function BlockPart({ children, partProps, ...attrs }: Props): JSX.Element;
}

